FlexBox (Flexibel Box Model)

Definisi FlexBox

FlexBox adalah Model layout 1 dimensi yang dapat mengatur jarak dan
penjajaran antar item di dalam sebuah container

1 dimensi? 
jadi,kita hanya dapat mengatur 1 dimensi pada saat tertentu.
jadi kita hanya dapat mengatur elemen" secara horizontal dalam satu baris 
atau secara vertikal dalam 1 kolom,jadi tidak bisa dua-duanya sekaligus.

#FlexBox hanya bisa 1 dimensi.

FlexBox layout Module :
adalah sebuah yang menawarkan cara yang efektif untuk menyusun, mensejajarkan
dan mendistribusikan jarak antar item di dalam sebuah container, meskipun ukurannya
dinamis atau bahkan kita tidak tahu.

istilah pada FlexBox :
ada 2 yaitu :
1. main --> dari kiri ke kanan
2. cross --> dari atas ke bawah

- main axis adalah sumbu utama dari sebuah container yang menentukan urutan
dari penempatan items secara horizontal.

- main start / main-end adalah mulai dan berakhirnya items yang di simpan
di dalam container.

- main size adalah ukuran (width/height) dari container yang akan membuat 
dimensi dari items nya relatif terhadap main size.


# PROPERTY PADA CONTAINER 
Property yang bisa kita kasih pada containernya,
agar flex nya berjalan dengan baik, kita perlu kasih Property
ke pembungkusnya dan juga elemen di dalamnya/itemsnya :

1. display
contoh :
.container {
    display : flex; atau inline-flex
}

[+] flex : 
flexnya tidak akan jalan,jika pembungkusnya/kotaknya 
tidak kita kasih display flex.

TUJUANNYA dari flex ini adalah membuat sebuah elemen parent menjadi
FlexBox dan membuat elemen-elemen di dalamny bisa berparilaku flex juga.

[+] flex-direction
lalu kita bisa kasih "flex-direction" bertujuan untuk mengatur arah dari
urutan elemen-elemen didalamnya, bisa secara horizontal/vertikal.
contoh :
.container {
    flex-direction : row | row-reverse | column | column-reverse
}
1. defaultnya --> row (dari kiri ke kanan)
2. row-reverse --> (dari kanan ke kiri)
3. column --> (dari atas ke bawah)
3. column-reverse --> (dari bawah ke atas)

[+] flex-wrap --> 
untuk mengatur ketika elemen yang kita punya
sudah tidak muat ke container di dalam barisnya.
Jika ingin di turunkan ke bawah,kita perlu pakai flex-wrap.
karena,jika tidak pakai flex-wrap, items akan selalu memaksa di dalam container.
contoh :
.container {
    flex-wrap : nowrap | wrap | wrap-reverse
}
1. defaultnya --> nowrap
2. wrap
3. wrap-reverse

secara defaul, semua items di didalam container akan berada pada satu baris
meskipun ukurannya sudah tidak cukup, wrap memungkinkan untuk memindahkan items 
ke baris dibawahnya.

[+] Justify-content 
bertujuan untuk mengatur rata dari elemen-elemen didalamnya
contoh : 
.container {
    Justify-content : flex-start | flex-end | center | space-between | space-around | space-evenly
}
--> mengatur jarak antar items

1. flex-start - default

2. flex-end - elemen akan berada di akhir

3. center - elemen akan berada di tengah

4. space-between - elemen pertama akan mepet kiri, elemen terakhir akan mepet kanan
lalu sisanya(ditengah) akan di beri jarak yang sama.

5. space-around - membagi rata sisi kiri dan sisi kanan
jadi yang kiri itu setengah dari jarak yang kanannya

6. space-evenly -  kiri dan kanannya sama

[+] align-items
bertujuan untuk mengatur kesejajaran items secara vertikal
contoh :
.container {
    align-items : flex-start | flex-end | center | stretch | baseline
}
Mengatur perilaku penjajaran items terhadap coss axisnya.

1. flex-start --> (defaultnya) dia akan rata ke atas 

2. flex-end --> dia akan rata ke bawah

3. center --> dia akan rata tengah

4. stretch --> items akan memenuhi container ketika kita tidak kasih height nya.

5. baseline --> dia atur rata tengahnya berdasarkan tulisan yang ada di dalamnya.
jadi tergantung baseline font nya.

Ada tehnik CSS yang dapat mengatur keduanya sekaligus.
yaitu secara 2 dimensi dengan CSS GRID.

[+] align-content
ini sama seperti align-items,tapi hanya berlaku ketika content lebih dari satu baris.
contoh :
.container {
    align-content : flex-start | flex-end | center | space-between | space-around
}

Definisinya adalah untuk mengatur jarak antar items terhadap cross axis,tapi syaratnya
hanya berfungsi ketika itemsnya lebih dari satu baris.


# PROPERTY TERHADAP ITEMS 
kita bisa kasih "order" untuk mengatur urutan dari elemen-elemennya.
semua order dimulai dari 0!
dan dimulai dari kiri ke kanan (numerik)
contoh : 
    <div class="container">
        <div class="satu">1</div>
        <div class="dua">2</div>
        <div class="tiga">3</div>
        <div class="empat">4</div>
    </div>
    .satu {order: 2;}
    .dua {order: 3;}
    .tiga {order: 4;}
    .empat {order: 1;}

[+] flex-grow atau flex
bertujuan untuk mengatur ukuran dari si itemsnya.
contoh :
    .satu {flex-grow: 2;}
    .dua {flex-grow: 3;}
    .tiga {flex-grow: 4;}
    .empat {flex-grow: 1;}

[+] align-self
bertujuan untuk mengatur hanya 1 saja elemen di dalam barisnya,
yang mau kita posisikan dimana.
contoh :
.item (elemennya) {
    align-self : auto | flex-start | flex-end | center | baseline | stretch
}
1. flex-self --> di atas
2. flex-end --> di bawah
3. stretch --> memenuhin kotak